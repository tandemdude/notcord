#!/usr/bin/env bash
# This script was generated by bashly 0.8.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
notcord_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord - Utilities for installing and running notcord locally\n"
    echo

  else
    printf "notcord - Utilities for installing and running notcord locally\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord COMMAND\n"
  printf "  notcord [COMMAND] --help | -h\n"
  printf "  notcord --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  run       Run one of the components of notcord"
  echo "  install   Install one of the components of notcord"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
notcord_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord run - Run one of the components of notcord\n"
    echo

  else
    printf "notcord run - Run one of the components of notcord\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord run COMMAND\n"
  printf "  notcord run [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  frontend     Run the frontend"
  echo "  rest         Run the REST backend service"
  echo "  authorizer   Run the authorizer backend service"
  echo "  gateway      Run the gateway backend service"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
notcord_run_frontend_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord run frontend - Run the frontend\n"
    echo

  else
    printf "notcord run frontend - Run the frontend\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord run frontend\n"
  printf "  notcord run frontend --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
notcord_run_rest_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord run rest - Run the REST backend service\n"
    echo

  else
    printf "notcord run rest - Run the REST backend service\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord run rest\n"
  printf "  notcord run rest --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
notcord_run_authorizer_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord run authorizer - Run the authorizer backend service\n"
    echo

  else
    printf "notcord run authorizer - Run the authorizer backend service\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord run authorizer\n"
  printf "  notcord run authorizer --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
notcord_run_gateway_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord run gateway - Run the gateway backend service\n"
    echo

  else
    printf "notcord run gateway - Run the gateway backend service\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord run gateway\n"
  printf "  notcord run gateway --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
notcord_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord install - Install one of the components of notcord\n"
    echo

  else
    printf "notcord install - Install one of the components of notcord\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord install COMMAND\n"
  printf "  notcord install [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  backend   Installs the required files to run any backend service"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
notcord_install_backend_usage() {
  if [[ -n $long_usage ]]; then
    printf "notcord install backend - Installs the required files to run any backend service\n"
    echo

  else
    printf "notcord install backend - Installs the required files to run any backend service\n"
    echo

  fi

  printf "Usage:\n"
  printf "  notcord install backend\n"
  printf "  notcord install backend --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions

# :command.function
notcord_run_frontend_command() {
  # src/run_frontend_command.sh
  #
  # Copyright 2022 tandemdude
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #    http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  workdir=${PWD##*/}
  if [ "$workdir" != "notcord" ]; then
    echo "Commands must be run from the repository root"
    exit 1
  fi

  pushd frontend || exit 1
  yarn dev

}

# :command.function
notcord_run_rest_command() {
  # src/run_rest_command.sh
  #
  # Copyright 2022 tandemdude
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #    http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  workdir=${PWD##*/}
  if [ "$workdir" != "notcord" ]; then
    echo "Commands must be run from the repository root"
    exit 1
  fi

  pushd services || exit 1
  pushd rest-server || exit 1

  if [[ ! "${NC_WORKER_ID}" =~ ^[0-9]+$ ]]; then
    echo "NC_WORKER_ID not set or invalid. Defaulting to 0"
    export NC_WORKER_ID=0
  fi
  if [[ ! "${NC_PROCESS_ID}" =~ ^[0-9]+$ ]]; then
    echo "NC_PROCESS_ID not set or invalid. Defaulting to 0"
    export NC_PROCESS_ID=0
  fi

  ../mvnw clean package spring-boot:run

}

# :command.function
notcord_run_authorizer_command() {
  # src/run_authorizer_command.sh
  #
  # Copyright 2022 tandemdude
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #    http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  workdir=${PWD##*/}
  if [ "$workdir" != "notcord" ]; then
    echo "Commands must be run from the repository root"
    exit 1
  fi

  pushd services || exit 1
  pushd authorizer-server || exit 1

  if [[ ! "${NC_WORKER_ID}" =~ ^[0-9]+$ ]]; then
    echo "NC_WORKER_ID not set or invalid. Defaulting to 0"
    export NC_WORKER_ID=0
  fi
  if [[ ! "${NC_PROCESS_ID}" =~ ^[0-9]+$ ]]; then
    echo "NC_PROCESS_ID not set or invalid. Defaulting to 0"
    export NC_PROCESS_ID=0
  fi

  npx tailwindcss -i ./src/main/resources/static/input.css -o ./src/main/resources/static/output.css && ../mvnw clean package spring-boot:run

}

# :command.function
notcord_run_gateway_command() {
  # src/run_gateway_command.sh
  #
  # Copyright 2022 tandemdude
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #    http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  workdir=${PWD##*/}
  if [ "$workdir" != "notcord" ]; then
    echo "Commands must be run from the repository root"
    exit 1
  fi

  pushd services || exit 1
  pushd gateway-server || exit 1

  # Gateway does not need these for now
  #if [[ ! "${NC_WORKER_ID}" =~ ^[0-9]+$ ]]; then
  #  echo "NC_WORKER_ID not set or invalid. Defaulting to 0"
  #  export NC_WORKER_ID=0
  #fi
  #if [[ ! "${NC_PROCESS_ID}" =~ ^[0-9]+$ ]]; then
  #  echo "NC_PROCESS_ID not set or invalid. Defaulting to 0"
  #  export NC_PROCESS_ID=0
  #fi

  ../mvnw clean package spring-boot:run

}

# :command.function
notcord_install_backend_command() {
  # src/install_backend_command.sh
  #
  # Copyright 2022 tandemdude
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #    http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  workdir=${PWD##*/}
  if [ "$workdir" != "notcord" ]; then
    echo "Commands must be run from the repository root"
    exit 1
  fi

  pushd services || exit 1
  ./mvnw clean install

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    notcord_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  run )
    action="run"
    shift
    notcord_run_parse_requirements "$@"
    shift $#
    ;;

  install )
    action="install"
    shift
    notcord_install_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    notcord_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
notcord_run_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    notcord_run_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  frontend )
    action="frontend"
    shift
    notcord_run_frontend_parse_requirements "$@"
    shift $#
    ;;

  rest )
    action="rest"
    shift
    notcord_run_rest_parse_requirements "$@"
    shift $#
    ;;

  authorizer )
    action="authorizer"
    shift
    notcord_run_authorizer_parse_requirements "$@"
    shift $#
    ;;

  gateway )
    action="gateway"
    shift
    notcord_run_gateway_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    notcord_run_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
notcord_run_frontend_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    notcord_run_frontend_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="run frontend"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
notcord_run_rest_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    notcord_run_rest_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="run rest"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
notcord_run_authorizer_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    notcord_run_authorizer_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="run authorizer"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
notcord_run_gateway_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    notcord_run_gateway_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="run gateway"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
notcord_install_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    notcord_install_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  backend )
    action="backend"
    shift
    notcord_install_backend_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    notcord_install_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
notcord_install_backend_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    notcord_install_backend_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="install backend"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

  # src/initialize.sh
  #
  # Copyright 2022 tandemdude
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #    http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.


}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "run" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      notcord_run_usage
    else
      notcord_run_command
    fi

  elif [[ $action == "run frontend" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      notcord_run_frontend_usage
    else
      notcord_run_frontend_command
    fi

  elif [[ $action == "run rest" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      notcord_run_rest_usage
    else
      notcord_run_rest_command
    fi

  elif [[ $action == "run authorizer" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      notcord_run_authorizer_usage
    else
      notcord_run_authorizer_command
    fi

  elif [[ $action == "run gateway" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      notcord_run_gateway_usage
    else
      notcord_run_gateway_command
    fi

  elif [[ $action == "install" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      notcord_install_usage
    else
      notcord_install_command
    fi

  elif [[ $action == "install backend" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      notcord_install_backend_usage
    else
      notcord_install_backend_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
